+ создать в бд таблицы для ролевой модели User, Role, Permission
+ разобраться с миграциями (повторить ролик из рутуба)
+ создать crud для всех Асущностей
+ подключить passport js
+ добавить защиту на роуты

+ во все сервисы нужно добавить try catch чтобы на фронт возвращался корректный ответ об ошибке

+ при удалении Permission возникает ошибка из за связанных таблиц, нужно будет придумать как это исправить, возможно нужно будет применить каскадное удаление или удлять свзяи отдельно

+ добавить документацию к api

+ добавить базовую роль admin, которая будет добавляться в базу при первом запуске приложения если ее там нет

+ нужно ввести ограничение на удаление пользователя с правами администратора, пользователь с ролью администратор нельзя удалить через api

+ добавить api для смены пароля
+ добавить валидацию на входные параметры
+ добавить гвард который проверяет права доступа к ресурсам
+ добавить дефолтные права доступа к ресурсам в базу данных при первом запуске приложения (если их там нет) и присвоить роди admi
+ протестировать в ручном режиме гвард который проверяет права доступа к ресурсам

- создать end to end тесты, при запуске должна запускаться новый контейнер с тестовой базой данных, потом применяется скрипт с миграциями, они применяются, затем запускаются тесты, после тестирования контейнер с тестовой базой данных удаляется

Реализовать Сценарии для тестирования:

- 1. Инициализация системы:
   - Проверка наличия дефолтного пользователя admin
   - Проверка наличия базовых ролей и разрешений

- 2. Тестирование под пользователем admin:
   - Создание тестового пользователя user1
   - Создание тестовой роли testRole1
   - Назначение разрешений роли testRole1
   - Назначение роли testRole1 пользователю user1

- 3. Тестирование под пользователем user1:
   - a) Аутентификация:
      - Успешный вход
      - Неверные учетные данные
      - Выход из системы
   
   - b) Управление сессией:
      - Получение и обновление токенов
      - Проверка срока действия токенов
      - Инвалидация токенов
   
   - c) Управление пользователями:
      - Просмотр своего профиля
      - Обновление своих данных
      - Попытка просмотра профиля admin (должна быть отклонена)
      - Попытка изменения данных admin (должна быть отклонена)
   
   - d) Управление ролями:
      - Просмотр своих ролей
      - Просмотр доступных ролей
      - Попытка создания новой роли (должна быть отклонена)
      - Попытка изменения своих ролей (должна быть отклонена)
   
   - e) Управление разрешениями:
      - Просмотр своих разрешений
      - Просмотр всех разрешений
      - Попытка изменения разрешений (должна быть отклонена)
   
   - f) Проверка ограничений доступа:
      - Доступ к разрешенным эндпоинтам
      - Попытка доступа к запрещенным эндпоинтам
      - Проверка работы гвардов и декораторов
   
   - g) Проверка безопасности:
      - Попытка повышения своих прав
      - Попытка доступа к системным настройкам
      - Тестирование защиты от распространенных атак
   
   - h) Проверка граничных случаев:
      - Обработка невалидных данных
      - Проверка лимитов и ограничений
      - Тестирование обработки ошибок

- 4. Финальная проверка под admin:
   - Проверка логов действий user1
   - Удаление тестового пользователя user1
   - Удаление тестовой роли testRole1

- внедрить мультитенантность

- параметры api для получения списка должны быть совместимы с react-admin


- добавить кэширование
- добавить логирование

- ! logout не удаляет refresh токен из кук браузера
